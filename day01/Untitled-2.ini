1. C++中static的作用？什么场景使用static?
static局部变量：当你需要在函数的多次调用之间保持某个变量的值时
static全局变量或函数：当你想要限制变量或函数的作用域，防止它们在其他文件中被访问时
static类的成员变量或函数：当你想要类的所有对象共享某个变量或者函数时，或者当你想要在没有类实例的情况下访问某个函数时

2. C++中define和const的区别？
作用机制；类型安全；作用域；调试和编译输出

3. 什么是内存对齐？为什么要内存对齐？
性能提升；硬件限制；可移植性；

4. 4中类型转换
static_cast; dynamic_cast(只有在基类包含虚函数才可以使用); const_cast; reinterpret_cast(主要用于几乎无关的类型之间进行转换)；

5. C++中volatile的作用？
硬件编程；

6. 什么是多态？简单介绍下C++的多台
静态多态和动态多态；虚函数表；纯虚函数和抽象类；接口的分离与设计模式；

7. C++什么场景下需要用到移动构造函数和移动赋值运算符？
a. 当函数返回一个对象时，用移动构造函数可以避免返回值拷贝
b. 当函数传递参数时，使用右值+移动构造函数可以避免参数拷贝
c. 当需要一个大对象从一个容器（如vector)中移动到另一个容器时，用移动赋值运算符可以避免重复的资源分配和释放

8. 什么是C++中的虚继承？
菱形继承问题：
这是虚继承主要用来解决的问题。假设四个类A,B,C,D，其中B和C都继承A，而D又同时继承B和C。这样就会形成一个“菱形”结构。若不使用虚继承，D类中会包含两个独立的A类子对象，导致冗余。
核心问题的核心：确保在派生类中，基类仅有一个实例。因此当涉及到访问基类成员时，不会产生歧义。

9. 什么是C++的函数重载？和重写有什么区别？
函数重载的优点：
1)增强代码的可读性。使用同名函数，而不用为不同的功能选择完全不同的函数名，程序员可以更加直观地理解代码
2)改善了程序的可维护性。函数重载让我们可以定义一个通用接口，让同名函数实现不同的功能，减轻函数命名的负担。
函数重载和函数重写的区别：
1)位置
2)参数列表
3)函数重载-->编译过程，静态绑定； 函数重写-->运行时，动态绑定。

10. union和struct有什么区别？如何使用union做优化？
主要区别：
1) 存储方式：struct中的所有成员变量各自占据独立的存储空间，而union中的所有成员变量公用同一块内存空间，且大小是最大成员的大小。
2) 访问方式：struct的所有成员变量可以存在并被




